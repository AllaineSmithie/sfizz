import os
import sys
import subprocess
import shutil
Import('env')

def mySubProcess(cmdline):
    startupinfo = None
    if os.name == "nt":
        startupinfo = subprocess.STARTUPINFO()
        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW

    popen_args = {
        "stdin": subprocess.PIPE,
        "stdout": subprocess.PIPE,
        "stderr": subprocess.PIPE,
        "startupinfo": startupinfo,
        "shell": True,
        "encoding":'utf-8',
        "errors":'ignore'
    }
    print("CMD: " + cmdline)
    if sys.version_info >= (3, 7, 0):
        popen_args["text"] = True

    proc = subprocess.Popen(cmdline, **popen_args)

    for line in iter(proc.stdout.readline, ''):
        print(line.rstrip())
    #    print("line_end")
    #print("before com")
    _, err = proc.communicate()
    #print("after com")
    rv = proc.wait()
    #if rv:
    #    print("=====")
    #    print(err)
    #    print("=====")
    #return rv

    # mySubProcess("mkdir deadline_audio_engine/sfizz/build")
# if env["platform"] == "windows":
    # 32 bits are unsupported

SConscript("src/SCsub")

if env.GetOption('clean'):
    if os.path.exists('./build/'):
        shutil.rmtree('./build/')
else:
    arch = "-DCMAKE_BUILD_TYPE=ALL"
    if env["arch"] == "x86_32":
        arch = "-DCMAKE_BUILD_TYPE=ALL -DCMAKE_GENERATOR_PLATFORM=x86"
        
    if env.dev_build:
        if not os.path.exists('./build/'):
            mySubProcess("cmake  -S . -B build -DSFIZZ_SHARED=OFF -DSFIZZ_RENDER=OFF -DSFIZZ_JACK=OFF " + arch)
        mySubProcess("cmake --build build --config RelWithDebInfo")
    else:
        if not os.path.exists('./build/'):
            mySubProcess("cmake  -S . -B build -DSFIZZ_SHARED=OFF -DSFIZZ_RENDER=OFF -DSFIZZ_JACK=OFF " + arch)
        mySubProcess("cmake --build build --config Release")
